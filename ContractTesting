const { expect } = require("chai"); //
const { ethers } = require("hardhat");

describe("ğŸ“œ Inbox Smart Contract", function () {
    let inbox;
    let owner, user;

    beforeEach(async function () {
        [owner, user] = await ethers.getSigners();
        const Inbox = await ethers.getContractFactory("Inbox");
        inbox = await Inbox.deploy("Hello, world!");
        await inbox.deployed();
    });

    describe("âœ… 1. Kontrat Deploy Testleri", function () {
        it("Kontrat baÅŸarÄ±lÄ± ÅŸekilde deploy edildi mi?", async function () {
            expect(inbox.address).to.not.be.undefined;
        });

        it("Ä°lk mesaj doÄŸru atandÄ± mÄ±?", async function () {
            expect(await inbox.message()).to.equal("Hello, world!");
        });

        it("Owner doÄŸru atandÄ± mÄ±?", async function () {
            expect(await inbox.owner()).to.equal(owner.address);
        });
    });

    describe("ğŸ”¹ 2. Fonksiyon Testleri", function () {
        it("Mesaj gÃ¼ncelleniyor mu?", async function () {
            await inbox.setMessage("New Message");
            expect(await inbox.message()).to.equal("New Message");
        });

        it("Sadece owner mesajÄ± deÄŸiÅŸtirebilir mi?", async function () {
            await expect(
                inbox.connect(user).setMessage("Hacker Message")
            ).to.be.revertedWith("Only owner can set message");
        });
    });

    describe("ğŸ”¸ 3. Edge Case Testleri", function () {
        it("BoÅŸ mesaj girildiÄŸinde ne oluyor?", async function () {
            await inbox.setMessage("");
            expect(await inbox.message()).to.equal("");
        });

        it("Ã‡ok uzun mesaj girildiÄŸinde Ã§alÄ±ÅŸÄ±yor mu?", async function () {
            const longMessage = "A".repeat(1000);
            await inbox.setMessage(longMessage);
            expect(await inbox.message()).to.equal(longMessage);
        });
    });
});
